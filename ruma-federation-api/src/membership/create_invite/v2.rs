//! [PUT /_matrix/federation/v2/invite/{roomId}/{eventId}](https://matrix.org/docs/spec/server_server/r0.1.4#put-matrix-federation-v2-invite-roomid-eventid)

use js_int::UInt;
use ruma_api::ruma_api;
use ruma_events::{room::member::MemberEventContent, EventType};
use ruma_identifiers::{EventId, RoomId, RoomVersionId, ServerName, UserId};

use super::{InviteEvent, StrippedState};

ruma_api! {
    metadata: {
        description: "Invites a remote user to a room.",
        method: PUT,
        name: "create_invite",
        path: "/_matrix/federation/v2/invite/:room_id/:event_id",
        rate_limited: false,
        requires_authentication: true,
    }

    request: {
        /// The room ID that the user is being invited to.
        #[ruma_api(path)]
        room_id: RoomId,

        /// The event ID for the invite event, generated by the inviting server.
        #[ruma_api(path)]
        event_id: EventId,

        /// The version of the room where the user is being invited to.
        room_version: RoomVersionId,

        /// An invite event.
        event: InviteEvent,

        /// An optional list of simplified events to help the receiver of the invite identify the room.
        invite_room_state: StrippedState,
    }

    response: {
        /// An invite event.
        event: InviteEvent,
    }
}

/// Initial set of fields for `Response`.
pub struct ResponseInit {
    /// The matrix ID of the user who sent the original `m.room.third_party_invite`.
    sender: UserId,

    /// The name of the inviting homeserver.
    origin: Box<ServerName>,

    /// A timestamp added by the inviting homeserver.
    origin_server_ts: UInt,

    /// The user ID of the invited member.
    state_key: UserId,

    /// The content of the event. Must include a `membership` of invite.
    content: MemberEventContent,
}

impl Request {
    /// Creates a new `Request` with the given parameters
    pub fn new(
        room_id: RoomId,
        event_id: EventId,
        room_version: RoomVersionId,
        event: InviteEvent,
        invite_room_state: StrippedState,
    ) -> Self {
        Self { room_id, event_id, room_version, event, invite_room_state }
    }
}

impl Response {
    /// Creates a new `Response` with the given inital values
    pub fn new(init: ResponseInit) -> Self {
        Self {
            event: InviteEvent {
                sender: init.sender,
                origin: init.origin,
                origin_server_ts: init.origin_server_ts,
                kind: EventType::RoomMember,
                state_key: init.state_key,
                content: init.content,
            },
        }
    }
}

//! [PUT /_matrix/federation/v1/invite/{roomId}/{eventId}](https://matrix.org/docs/spec/server_server/r0.1.4#put-matrix-federation-v1-invite-roomid-eventid)

use js_int::UInt;
use ruma_api::ruma_api;
use ruma_events::{room::member::MemberEventContent, EventType};
use ruma_identifiers::{EventId, RoomId, ServerName, UserId};
use serde::{Deserialize, Serialize};
use serde_json::Value;

ruma_api! {
    metadata: {
        description: "Invites a remote user to a room.",
        method: PUT,
        name: "create_invite",
        path: "/_matrix/federation/v1/invite/:room_id/:event_id",
        rate_limited: false,
        requires_authentication: true,
    }

    request: {
        /// The room ID that the user is being invited to.
        #[ruma_api(path)]
        room_id: RoomId,

        /// The event ID for the invite event, generated by the inviting server.
        #[ruma_api(path)]
        event_id: EventId,

        /// The matrix ID of the user who sent the original `m.room.third_party_invite`.
        sender: UserId,

        /// The name of the inviting homeserver.
        origin: Box<ServerName>,

        /// A timestamp added by the inviting homeserver.
        origin_server_ts: UInt,

        /// The value `m.room.member`.
        #[serde(rename = "type")]
        kind: EventType,

        /// The user ID of the invited member.
        state_key: UserId,

        /// The content of the event.
        content: MemberEventContent,

        /// Information included alongside the event that is not signed.
        unsigned: UnsignedEventContent,
    }

    response: {
        /// The response invite event
        #[ruma_api(body)]
        #[serde(with = "crate::serde::invite_response")]
        invite_response: InviteResponse,
    }
}

/// Information included alongside an event that is not signed.
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct UnsignedEventContent {
    /// An optional list of simplified events to help the receiver of the invite identify the room.
    /// The recommended events to include are the join rules, canonical alias, avatar, and name of
    /// the room.
    invite_room_state: Vec<StrippedState>,
}

/// A simplified event that helps the server identify a room.
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct StrippedState {
    /// The `content` for the event.
    content: Value,

    /// The `state_key` for the event.
    state_key: String,

    /// The `type` for the event.
    #[serde(rename = "type")]
    kind: EventType,

    /// The `sender` for the event.
    sender: UserId,
}

/// The invite event sent as a response.
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct InviteResponse {
    /// The matrix ID of the user who sent the original `m.room.third_party_invite`.
    sender: UserId,

    /// The name of the inviting homeserver.
    origin: Box<ServerName>,

    /// A timestamp added by the inviting homeserver.
    origin_server_ts: UInt,

    /// The event type (should always be `m.room.member`).
    kind: EventType,

    /// The user ID of the invited member.
    state_key: UserId,

    /// The content of the event. Must include a `membership` of invite.
    content: MemberEventContent,
}

/// Initial set of fields of `Request`.
pub struct RequestInit {
    /// The room ID that the user is being invited to.
    room_id: RoomId,

    /// The event ID for the invite event, generated by the inviting server.
    event_id: EventId,

    /// The matrix ID of the user who sent the original `m.room.third_party_invite`.
    sender: UserId,

    /// The name of the inviting homeserver.
    origin: Box<ServerName>,

    /// A timestamp added by the inviting homeserver.
    origin_server_ts: UInt,

    /// The user ID of the invited member.
    state_key: UserId,

    /// The content of the event.
    content: MemberEventContent,

    /// Information included alongside the event that is not signed.
    unsigned: UnsignedEventContent,
}

/// Initial set of fields for `Response`.
pub struct ResponseInit {
    /// The matrix ID of the user who sent the original `m.room.third_party_invite`.
    sender: UserId,

    /// The name of the inviting homeserver.
    origin: Box<ServerName>,

    /// A timestamp added by the inviting homeserver.
    origin_server_ts: UInt,

    /// The user ID of the invited member.
    state_key: UserId,

    /// The content of the event. Must include a `membership` of invite.
    content: MemberEventContent,
}

impl Request {
    /// Creates a new `Request` with the given parameters.
    pub fn new(init: RequestInit) -> Self {
        Self {
            room_id: init.room_id,
            event_id: init.event_id,
            sender: init.sender,
            origin: init.origin,
            origin_server_ts: init.origin_server_ts,
            kind: EventType::RoomMember,
            state_key: init.state_key,
            content: init.content,
            unsigned: init.unsigned,
        }
    }
}

impl Response {
    /// Creates a new `Response` with the given parameters
    pub fn new(init: ResponseInit) -> Self {
        Self {
            invite_response: InviteResponse {
                sender: init.sender,
                origin: init.origin,
                origin_server_ts: init.origin_server_ts,
                kind: EventType::RoomMember,
                state_key: init.state_key,
                content: init.content,
            },
        }
    }
}
